@page "/workconditions"
@using AutoMapper

@inject IMapper _mapper
@inject IEmployeeRepository _employeeRepository


<div class="d-flex justify-content-center">
    <div class="spinner-border text-primary" role="status" style="@($"display: {SpinnerVisiblility}; margin: 20%;")">
        <text class="visually-hidden">Loading...</text>
    </div>
</div>
<div style="@($"display: {PageVisiblility}")">
    <h2 class="header text-center m-4" style="font-family: 'MS UI Gothic'">Work conditions index</h2>
    <table class="table table-bordered" style="table-layout: fixed; width: 80%; margin: auto;">
       <thead>
           <tr>
               <th scope="col">Employee name</th>
               <th scope="col"></th>
               <th scope="col"/>
           </tr>
       </thead>
       <tbody>
            @{
                foreach(var employee in Employees)
                {
                                    <tr>
                                        <td>@employee.FirstName</td>
                                        <td>
                                            <NavLink class="btn btn-primary form-control" href="@($"/details/{employee.Id}")">Details</NavLink>
                                        </td>
                                        <td><NavLink class="btn btn-success form-control" href="@string.Format("/add/{0}", employee.Id)" >Add Conditions</NavLink></td>
                                    </tr>
                }
            }
       </tbody>

    </table>
 </div>

@code {
    public List<ViewModel.Employee> Employees { get; set; } = new();
    private EmployeeManager _employeeManager; 
    string PageVisiblility = "None";
    string SpinnerVisiblility = "Normal";

    protected async override Task OnInitializedAsync()
    {
        _employeeManager = new EmployeeManager(_mapper, _employeeRepository);
        Employees = _mapper.Map<List<ViewModel.Employee>>(await _employeeManager.GetEmployeesAsync());
        SpinnerVisiblility = "None";
        PageVisiblility = "Normal";
    }

   
}
