@page "/add/{EmployeeId:int}"

@using AutoMapper;
@inject IMapper _mapper;
@inject ICurrenciesRepository _currenciesRepo;
@inject IWConditionsRepository _wcRepository;

<PageTitle>Add work conditions</PageTitle>
<EditForm Model="this.WorkConditons" OnValidSubmit="OnSubmit" style="width: 50%; margin: 3% auto auto auto;">
    <DataAnnotationsValidator/>
    <h2 class="text-center m-4 header ">Work Conditions</h2>
    <table class="mt-2 table table-bordered border-2 border-secondary">
        <tbody>
            <tr>
                <th scope="row">Date:</th>
                <td>
                    <InputDate @bind-Value=WorkConditons.Date class="form-control"/>
                </td>
            </tr>
            <tr>
                <th scope="row">Pay rate:</th>
                <td>
                    <InputNumber @bind-Value=WorkConditons.PayRate class="form-control"/>
                    <ValidationMessage For="@(() => this.WorkConditons.PayRate)"/>
                </td>
            </tr>
            <tr>
                <th scope="row">Wage currency:</th>
                <td>
                    <InputSelect @bind-Value=WorkConditons.WageCurrencyId class="form-control">
                        <option value="0">Select a Currency</option>
                        @foreach (var currency in _currencies)
                        {
                            <option value="@currency.Id">@currency.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => this.WorkConditons.WageCurrencyId)"/>
                </td>
            </tr>
            <tr>
                <th scope="row">Expenses currency:</th>
                <td>
                    <InputSelect @bind-Value=WorkConditons.ExpensesCurrencyId class="form-control">
                        <option value="0">Select a Currency</option>
                        @foreach (var currency in _currencies)
                        {
                            <option value="@currency.Id">@currency.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => this.WorkConditons.ExpensesCurrencyId )"/>
                </td>
            </tr>
            <tr>
                <th scope="row">Pay currency:</th>
                <td>
                    <InputSelect @bind-Value=WorkConditons.PayCurrencyId class="form-control">
                        <option value="0">Select a Currency</option>
                        @foreach (var currency in _currencies)
                        {
                            <option value="@currency.Id">@currency.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => this.WorkConditons.PayCurrencyId )" />
                </td>
            </tr>
            <tr>
                <th scope="row">Deductions:</th>
                <td>
                    <InputNumber @bind-Value=WorkConditons.Deductions class="form-control" />
                    <ValidationMessage For="@(() => this.WorkConditons.Deductions)"/>
                </td>
            </tr>
            <tr>
                <td>
                    <NavLink class="btn btn-success form-control" href="/workconditions" >Cancel</NavLink>
                 </td>
                <td>
                    <button class="btn btn-primary form-control">Submit</button>
                </td>
            </tr>

        </tbody>

    </table>

</EditForm>

@code {
    [Parameter]
    public int EmployeeId { get; set; }
    WorkConditions WorkConditons { get; set; } = new WorkConditions();
    private List<ViewModel.Currency> _currencies  = new List<ViewModel.Currency>();

    protected override void OnInitialized()
    {
        LoadData();
    }

    private async void LoadData()
    {
        var currenciesManager = new CurrenciesManager(_mapper, _currenciesRepo);
        _currencies = _mapper.Map<List<ViewModel.Currency>>( await currenciesManager.GetAllCurrencies());
        StateHasChanged();
    }

    private void OnSubmit()
    {
        if(EmployeeId != 0)
        {
            this.WorkConditons.EmployeeId = EmployeeId;
            var wcManager = new WorkConditionsManager(_mapper, _wcRepository);
            wcManager.AddWorkConditions(_mapper.Map<InternationalWagesManager.DTO.WorkConditions>(this.WorkConditons));
        }
        this.WorkConditons = new();
    }
}
