@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using AutoMapper
@using Blazorise



@inject IJSRuntime _jsRuntime;
@inject IEmployeeRepository _employeeRepo;
@inject IMapper _mapper;
@inject NavigationManager _navigation
@inject IMessageService MessageService;

@page "/employee"

    <style>
        .btn {
            width: 250px;
        }

    </style>


 <div class="d-flex justify-content-center" >
  <div class="spinner-border text-primary" role="status" style="@($"display: {SpinnerVisiblility}; margin: 20%;")" >
    <span class="visually-hidden">Loading...</span>
  </div>
</div>

<EditForm Model=SelectedEmployee OnValidSubmit=OnSubmit style="@($"display: {PageVisiblility}; width: 50%; margin: auto;")" >
<DataAnnotationsValidator/>
<h2 class="m-5 text-center header">Employee's Details</h2>
<div >
    <table  class="table table-bordered border-2 border-secondary" >
  <tbody>
      <tr style="display: @SelectionVisibility">
          <th scope="row">Select Employee:</th>
          <td><select id="employee" class="form-control"   @bind-value="EmployeeId" @bind-value:event="oninput"   @onchange=SelectionChanged >
              <option value="0" selected>Please select a employee!</option>
				@foreach(var employee in Employees)
				{
					<option value="@employee.Id" >@employee.FullName</option>
				}
			</select>
            </td>
      </tr>
    <tr>
      <th scope="row">First name:</th>
      <td><InputText @bind-Value=SelectedEmployee.FirstName class="form-control" style="background-color: transparent"/></td>
    </tr>
    <tr>
      <th scope="row">Last name:</th>
      <td><InputText @bind-Value=SelectedEmployee.LastName class="form-control" style="background-color: transparent"/></td>
    </tr>
    <tr>
      <th scope="row">D.O.B</th>
      <td><InputDate @bind-Value=SelectedEmployee.DOB class="form-control" /></td>
    </tr>
    <tr>
      <th scope="row">Phone:</th>
      <td><InputText @bind-Value=SelectedEmployee.Phone class="form-control" style="background-color: transparent"/></td>
    </tr>
    <tr>
      <th scope="row">Email:</th>
      <td><InputText @bind-Value=SelectedEmployee.Email class="form-control" style="background-color: transparent"/></td>
    </tr>
  </tbody>
</table>
<div class="d-flex  justify-content-center h25 mt-5" >
        <div class="mx-2 "><button class="btn btn-outline-secondary  " type="button" style="display: @SelectionVisibility" @onclick=SetAction>Add Employee</button></div>
        <div class="mx-2"><button class="btn btn-outline-secondary " type="button" style="display: @SelectionVisibility" @onclick=OnDelete>Delete Employee</button></div>
       
</div>
<div class="d-flex justify-content-center mt-3 mb-3" >
     <div class="mx-2"> <button class="btn btn-outline-secondary" type="button" @onclick=OnCancel>Cancel</button></div>
        <div class="mx-2"> <button class="btn btn-outline-secondary" type="submit" >Submit</button></div>
</div>
</div>
<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
</EditForm>





@code {
    private EmployeeManager _employeeManager;
    public Employee SelectedEmployee { get; set; } = new();
    public IEnumerable<Employee> Employees = new List<Employee>();
    public int EmployeeId { get; set; }
    public string SelectionVisibility { get; set; } = "Normal";
    public string ActionType { get; set; } = NEW;
    const string EDIT = "View Details";
    const string NEW = "Add Employee";
    string PageVisiblility = "None";
    string SpinnerVisiblility = "Normal";

   


    protected override void OnInitialized()
    {
        _employeeManager = new EmployeeManager(_mapper, _employeeRepo);
        _employeeManager.SuccessMessage += TostrMessage;
        _employeeManager.AlertFunc += ShowConfirmMessage;
        LoadData();
    }

    public void SelectionChanged(ChangeEventArgs e)
    {
        SelectedEmployee = Employees.Single(e => e.Id == EmployeeId);
    }

    public void SetAction()
    {
        //To clear all fields and selection
        SelectedEmployee = new Employee();
        EmployeeId = 0;

        ActionType = ActionType == NEW ? EDIT : NEW;
        SelectionVisibility = ActionType == EDIT ? "None" : "Normal";
        StateHasChanged();
    }

    private async Task OnDelete()
    {
        if (SelectedEmployee.Id == 0 )
            return;

        await _employeeManager.DeleteEmployeeAsync(_mapper.Map<InternationalWagesManager.DTO.Employee>(SelectedEmployee));
        _navigation.NavigateTo(_navigation.BaseUri);
    }
    private void OnCancel()
    {
        _navigation.NavigateTo(_navigation.BaseUri);
    }

    public async void OnSubmit()
    {
        var dtoEmployee = _mapper.Map<InternationalWagesManager.DTO.Employee>(SelectedEmployee);
        if (ActionType == EDIT)
            await _employeeManager.AddEmployeeAsync(dtoEmployee);
        else
            _employeeManager.UpdateEmployee(dtoEmployee);

        SelectedEmployee = new Employee();
    }

     private async Task<bool> ShowConfirmMessage(string message)
    {
        if ( await MessageService.Confirm( message, "Warning") )
        {
            return true; 
        }
        return false;

    }

    private async void TostrMessage(string message)
    {
        try
        {
            await _jsRuntime.InvokeVoidAsync("ShowToastr", "Success", message);
        }
        catch (JSException e)
        {
        }
    }



    private async void LoadData()
    {
        var employees = await _employeeManager.GetEmployeesAsync();
        Employees = _mapper.Map<List<Employee>>(employees);
        SpinnerVisiblility = "None";
        PageVisiblility = "Normal";
        StateHasChanged();
    }

}

